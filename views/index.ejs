<!DOCTYPE html>
<html>
<head>
  <title>Пример EJS</title>
</head>
<style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
    }
    form{
        display: flex;
        align-items: center;
        justify-content: center;
    }

    h1 {
      background-color: #333;
      color: #fff;
      text-align: center;
      padding: 20px;
    }

    nav {
      background-color: #007BFF;
      padding: 10px;
      text-align: center;
    }

    nav a {
      color: #fff;
      text-decoration: none;
      margin: 0 10px;
    }

    nav a:hover {
      text-decoration: underline;
    }

    .container {
      margin: 20px;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    table, th, td {
      border: 1px solid #ddd;
    }

    th, td {
      padding: 15px;
      text-align: left;
    }

    .btn-1 {
      background-color: #dc3545;
      color: #fff;
      border: none;
      padding: 8px 16px;
      cursor: pointer;
    }

    .btn-2 {
      background-color: #28a745;
      color: #fff;
      border: none;
      padding: 8px 16px;
      cursor: pointer;
    }
  </style>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
<body>
    <nav>
      <a href="/">Home</a>
      <a href="/authors/new">Create Author</a>
      <a href="/authorList">Get all Author</a>
      <a href="/books/search">Search book</a>
      <a href="/login">Login</a>
      <a href="/register">Register</a>
    </nav>
  
    <div class="container">
      <h1><%= title %></h1>
  
      <h1>Create Book</h1>
      <form id="createBookForm">
        <div class="mb-3">
          <label for="titleInput">Title:</label>
          <input type="text" id="titleInput" required>
        </div>
        <div class="mb-3">
          <label for="authorInput">Author:</label>
          <input type="text"  id="authorInput" required>
        </div>
        <div class="mb-3">
          <label for="yearInput">Year:</label>
          <input type="number"  id="yearInput" required>
        </div>
        <button type="submit" class="btn-2">Save</button>
      </form>
  
      <h1>Book's List</h1>
      <table>
        <thead>
          <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Year</th>
            <th>Delete</th>
            <th>Edit</th>
          </tr>
        </thead>
        <tbody id="bookList">
        </tbody>
      </table>
    </div>
  
  <script>
      async function fetchBooks() {
          try {
              const response = await fetch('/books');
              if (response.ok) {
                  const books = await response.json();
                  const bookList = document.getElementById('bookList');
                  bookList.innerHTML = '';
  
                  books.forEach(book => {
                      const row = document.createElement('tr');
                      const titleCell = document.createElement('td');
                      titleCell.textContent = book.title;
  
                      const authorCell = document.createElement('td');
                      authorCell.textContent = book.author;
  
                      const yearCell = document.createElement('td');
                      yearCell.textContent = book.year;
  
                      const deleteButtonCell = document.createElement('td');
                      const deleteButton = document.createElement('button');
                      deleteButton.className = 'btn-1';
                      deleteButton.textContent = 'Delete';
                      deleteButton.addEventListener('click', () => {
                          deleteBook(book._id);
                      });
                      deleteButtonCell.appendChild(deleteButton);
  
                      const editButtonCell = document.createElement('td');
                      const editButton = document.createElement('button');
                      editButton.className = 'btn-2';
                      editButton.textContent = 'Edit';
                      editButton.addEventListener('click', () => {
                          editBook(book._id, book.title, book.author, book.year);
                      });
                      editButtonCell.appendChild(editButton);
  
                      row.appendChild(titleCell);
                      row.appendChild(authorCell);
                      row.appendChild(yearCell);
                      row.appendChild(deleteButtonCell);
                      row.appendChild(editButtonCell);
                      bookList.appendChild(row);
                  });
              } else {
                  console.error('Error fetching books');
              }
          } catch (error) {
              console.error('Error sending request:', error);
          }
      }
  
      async function createBook(event) {
          event.preventDefault();
  
          const title = document.getElementById('titleInput').value;
          const author = document.getElementById('authorInput').value;
          const year = document.getElementById('yearInput').value;
  
          try {
              const response = await fetch('/books', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                      title,
                      author,
                      year
                  }),
              });
  
  
            if (response.ok) {
                  console.log('Boook created successfully');
                  document.getElementById('titleInput').value = '';
                  document.getElementById('authorInput').value = '';
                  document.getElementById('yearInput').value = '';
                  await fetchBooks();
              } else {
                  console.error('Error creating book');
              }
          } catch (error) {
              console.error('Error sending request:', error);
          }
      }
      async function deleteBook(bookId) {
    if (confirm('Are you sure you want to delete this book?')) {
        try {
            const response = await fetch(`/books/${bookId}`, { // Added backticks around the URL string
                method: 'DELETE',
            });
            if (response.ok) {
                // Index deleted successfully, update the book list or perform any other actions
                console.log('Index deleted successfully');
                await fetchBooks(); // Refresh the book list after deletion
            } else {
                // Handle errors
                console.error('Error deleting book');
            }
        } catch (error) {
            console.error('Error during deleteBook:', error);
        }
    }
}

async function editBook(bookId, currentTitle, currentAuthor, currentYear) {
    const newTitle = prompt('Enter new title:', currentTitle);
    const newAuthor = prompt('Enter new author:', currentAuthor);
    const newYear = prompt('Enter new year:', currentYear);

    if (newTitle && newAuthor && newYear) {
        try {
            const response = await fetch(`/books/${bookId}`, { // Added backticks around the URL string
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    title: newTitle,
                    author: newAuthor,
                    year: newYear
                }),
            });

            if (response.ok) {
                console.log('Index updated successfully');
                await fetchBooks();
            } else {
                console.error('Error updating book');
            }
        } catch (error) {
            console.error('Error sending request:', error);
        }
    }
}
  
      document.getElementById('createBookForm').addEventListener('submit', createBook);
  
      window.addEventListener('load', fetchBooks);
  </script>
 
</body>
</html>